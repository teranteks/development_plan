
name: Docker_Img/Helm Repo Push 

on:
  branch_protection_rule:
    types: [created, edited]
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  image_check_changes:

    runs-on: ubuntu-latest
    
    outputs:
      img_file_changed: ${{ steps.check_img_file_changed.outputs.img_file_changed }}

    steps:
        - uses: actions/checkout@v3
          with:
          # Checkout as many commits needed for the diff
            fetch-depth: 2

        - shell: pwsh
          id: check_img_file_changed
          run: |
            # Diff HEAD with the previous commit

            $diff = git diff --name-only HEAD^ HEAD

            # Check if a file under app-code/ has changed (added, modified, deleted)

            $SourceDiff = $diff | Where-Object { $_ -match '^app-code/' }
            $HasDiff = $SourceDiff.Length -gt 0

            # Set the output named "img_file_changed"
            
            Write-Host "::set-output name=img_file_changed::$HasDiff"

  helm_check_changes:

    runs-on: ubuntu-latest
    
    outputs:
      helm_file_changed: ${{ steps.check_helm_files_changed.outputs.helm_file_changed }}

    steps:
        - uses: actions/checkout@v3
          with:
          # Checkout as many commits needed for the diff
            fetch-depth: 2

        - shell: pwsh
          id: check_helm_files_changed
          run: |
            # Diff HEAD with the previous commit

            $diff = git diff --name-only HEAD^ HEAD

            # Check if a file under app-code/ or under WebServer_Helm/ has changed (added, modified, deleted)

            $SourceDiff = $diff | Where-Object { $_ -match '^k8s_deployment_code/' -or $_ -match '^WebServer_Helm/' }
            $HasDiff = $SourceDiff.Length -gt 0

            # Set the output named "helm_file_changed"
            
            Write-Host "::set-output name=helm_file_changed::$HasDiff"


  build_push:

    runs-on: ubuntu-latest
    needs: [ image_check_changes ]
    if: needs.image_check_changes.outputs.img_file_changed == 'True'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          file: ./app-code/Dockerfile
          tags: teranteks/test_task_python_webserver:${{ github.run_number }}
      
  helm_archive:

     runs-on: ubuntu-latest
     needs: [ helm_check_changes, build_push ]
     if: needs.helm_check_changes.outputs.helm_file_changed == 'True'

     steps:
      - uses: actions/checkout@v3

      - name: Archive Helm Chart
        run: helm package ./WebServer_Helm 

      - name: Git Commit and Push
        uses: github-actions-x/commit@v2.9
        with:
          github-token: ${{ secrets.GITHUBTOKEN }}
          push-branch: 'main'
          commit-message: 'Push archived helm chart'
          force-add: 'true'
          files: WebServer_HelmChart-*.tgz
          name: teranteks
          email: jenkyfonk@gmail.com
  
  deploy_helm:

    runs-on: ubuntu-latest
    #needs: [ helm_archive ]

    steps:
      - uses: actions/checkout@v3
      
      - name: Kubectl install
        uses: azure/setup-kubectl@v3
        with:
          version: v1.15.0 # default is latest stable
  
      # - name: Get linode k8s config/access
      #   uses: mavieth/linode-authenticator@master
      #   with:
      #     LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      #     CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        # run: |
        #       # curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        #       # sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        #       # kubectl version --client
              
        #       curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        #       chmod 700 get_helm.sh
        #       ./get_helm.sh
        #       # mkdir ~/.kube
        #       # touch ~/.kube/config
        #       #echo ${{ secrets.KUBE_CONFIG_LINODE }} > ~/.kube/config
        # uses: azure/setup-helm@v3
        # with:
        #   version: v3.5.0 # default is latest (stable)

      # - name: Git Clone
      #   id: vars
      #   run: echo "::set-output name=ver::$(cat secrets.KUBE_CONFIG_LINODE)"
      
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_LINODE }}
      
      - name: Deploy k8s yaml
        id: deploy-k8s-yaml
        run: |
          # Verify 
          kubectl apply -f ./k8s_deployment_code/namespace.yaml
        


